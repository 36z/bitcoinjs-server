#!/usr/bin/env node

var fs = require('fs');
var util = require('util');
var path = require('path');
var Step = require('step');
var logger = require('../lib/logger');
var childProcess = require('child_process');

var args = process.argv.slice(2);
var command = args.shift();

if (!command) {
  command = "help";
}

var usage = "usage: bitcoinjs <command> [<args>] ...\n" +
  "\n" +
  "The most commonly used commands are:\n" +
  "  run        Run bitcoinjs-server daemon in foreground\n" +
  "  start      Run bitcoinjs-server as a managed daemon\n" +
  "  stop       Stop bitcoinjs-server daemon\n" +
  "  restart    Restart bitcoinjs-server daemon\n" +
  "  list       List currently runnning daemon instances\n" +
  "  db-reset   Reset the database\n" +
  "  db-drop    Drop the database\n" +
  "  bch-import Import block chain from dump\n" +
  "  bch-export Dump block chain into files\n" +
  "  verify     Statically check the block chain data\n" +
  "  test       Execute bitcoinjs-server's unit tests\n" +
  "  setup      Setup dependencies for a mod\n" +
  "\n" +
  "You can run 'bitcoinjs help <command>' to get help with a command.\n"+
  "Or run 'bitcoinjs help help' for an overview.\n";

switch (command) {
case "run":
  // This modifies the argv array such that we simulate calling the start
  // script direct, i.e. all parameters are passed through.
  process.argv.splice(1, 2, path.resolve(__dirname, '../daemon/start.js'));
  require("../daemon/start");
  break;

case "start":
  var sep = args.indexOf('--');
  if (sep != -1) {
    // If there is a "--" argument, we'll insert the script name there. That
    // will cause all prior arguments to be interpreted by forever and all
    // later arguments be interpreted by bitcoinjs.
    args.splice(sep, 1, path.resolve(__dirname, '../daemon/start.js'));
  } else {
    // If there isn't, we will just append the script name, causing all
    // arguments to be interpreted by forever.
    args.push(path.resolve(__dirname, '../daemon/start.js'));
  }
  // Finally, we'll add the start action to the beginning
  args.unshift("start");
  sh(__dirname + "/../node_modules/forever/bin/forever", args);
  break;

case "stop":
case "list":
case "restart":
case "status":
  if (command == "status") {
    command = "list";
  }
  args.push(path.resolve(__dirname, '../daemon/start.js'));
  args.unshift(command);
  sh(__dirname + "/../node_modules/forever/bin/forever", args);
  break;

case "rpc":
  // Simulate call to rpccli.js
  process.argv.splice(1, 2, path.resolve(__dirname, '../daemon/rpccli.js'));
  require("../daemon/rpccli");
  break;

case "db-reset":
case "db-drop":
  // This modifies the argv array such that we simulate calling the start
  // script direct, i.e. all parameters are passed through.
  process.argv.splice(1, 2, path.resolve(__dirname, '../daemon/'+command+'.js'));
  require("../daemon/"+command);
  break;

case "bch-export":
  var dumpPath = path.resolve('dump');
  path.exists(dumpPath, function (exists) {
    if (exists) {
      logger.error('Temporary directory "dump" exists. Aborting.');
      process.exit(1);
    }
    function dumpCollection(collection, callback) {
      Step(
        function dumpDatabase() {
          logger.info('Dumping '+collection);
          sh("mongodump",
             ["--db", "bitcoin",
              "--collection", collection,
              "--out", "dump"],
             // Quiet
             { customFds: [-1, -1, -1] },
             // Callback
             this
            );
        },
        function compressDatabase(err) {
          if (err) throw err;
          logger.info('Compressing '+collection);
          sh("bzip2", ["dump/bitcoin/"+collection+".bson"], this);
        },
        function getStat(err) {
          if (err) throw err;
          fs.stat("dump/bitcoin/"+collection+".bson.bz2", this);
        },
        function moveData(err, stat) {
          if (err) throw err;
          var sizeMB = Math.round(stat.size / 1024 / 102.4) / 10;
          logger.info('Stored '+collection+'.bson.bz2 ('+sizeMB+'MB)');
          sh("mv", ["dump/bitcoin/"+collection+".bson.bz2",
                    collection+".bson.bz2"], this);
        },
        callback
      );
    };

    Step(
      function doDumps() {
        dumpCollection("blocks", this.parallel());
        dumpCollection("transactions", this.parallel());
      },
      function cleanup(err) {
        if (err) {
          logger.error(err.stack ? err.stack : err.toString());

          // Note: No return, we still want to clean up, even if it failed.
        }
        sh("rm", ["-r", "dump"]);
      }
    );
  });
  break;

case "bch-import":
  function restoreCollection(collection, callback) {
    Step(
      function getStat() {
        fs.stat(collection+".bson.bz2", this);
      },
      function extractDatabase(err, stat) {
        if (err) {
          if (err.errno == 2) {
            // File not found, skip
            logger.warn("Dump file "+collection+".bson.bz2 not found, skipping");
            callback(null);
            return;
          }
          throw err;
        }
        logger.info('Extracting '+collection);
        sh("bunzip2", [collection+".bson.bz2", "--keep"], this);
      },
      function restoreDatabase(err) {
        if (err) throw err;
        logger.info('Importing '+collection);
        sh("mongorestore",
           ["--db", "bitcoin",
            "--collection", collection,
            "--drop",
            "--indexesLast",
            collection+".bson"],
           // Quiet
           { customFds: [-1, -1, -1] },
           // Callback
           this
          );
      },
      callback
    );
  };
  Step(
    function doDumps() {
      restoreCollection("blocks", this.parallel());
      restoreCollection("transactions", this.parallel());
    },
    function finish(err) {
      if (err) {
        logger.error(err.stack ? err.stack : err.toString());
        return;
      }
      sh("rm", ["blocks.bson", "transactions.bson", "accounts.bson"],
         { customFds: [-1, -1, -1] });
    }
  );
  break;

case "verify":
  // Simulate call to verify.js
  process.argv.splice(1, 2, path.resolve(__dirname, '../daemon/verify.js'));
  require("../daemon/verify");
  break;
  break;

case "test":
  Step(
    function findVows() {
      var callback = this;
      var vowsBin = path.resolve(__dirname, "../node_modules/vows/bin/vows");
      var found = false;
      
      if (isExecutable(vowsBin)) {
        callback(null, vowsBin);
      } else {
        childProcess.exec('which vows', function (err, vowsBin) {
          if (err) {
            callback(err);
            return;
          }
          console.log('OUT', !!vowsBin, path.existsSync(vowsBin));
          if (vowsBin && path.existsSync(vowsBin)) {
            callback(null, vowsBin);
          } else {
            callback("Not found, please install using "
                     + "'npm install -g vows'");
          }
        });
      }
    },
    function executeTests(err, vowsBin) {
      if (err) {
        logger.error("Error loading vows: "+
                     (err.stack ? err.stack : err.toString()));
        return;
      }
      var testDir = path.resolve(__dirname, "../test/");
      var testCases = fs.readdirSync(testDir);
      args = testCases.map(function (p) {
        if (p.substr(-3) !== '.js') return false;
        return testDir + "/" + p;
      });
      args = args.filter(function (v) {
        return v !== false;
      });
      sh(vowsBin, args);
    }
  );
  break;

case "setup":
  var npm = require('npm');
  process.chdir(path.resolve(__dirname, "../mods/", process.argv[process.argv.length - 1]));
  sh("npm",
     ["install"]);
  break;

case "make-man":
  // Regenerate man pages - this is intentionally undocumented (for now)
  // since it's only used by developers with commit rights.
  var Ronn = require('ronn').Ronn;
  var docsPath = path.resolve(__dirname, '../doc/');
  var roffPath = path.resolve(__dirname, '../man/');
  path.exists(roffPath, function (exists) {
    if (!exists) {
      fs.mkdirSync(roffPath, 0777);
    }
    fs.readdirSync(docsPath)
      .forEach(function (file) {
        var ronn = new Ronn(fs.readFileSync(docsPath + '/' + file));
        var roff = ronn.roff();
        fs.writeFileSync(roffPath + '/' + file.replace(/\.md$/, '.1'),
                         roff);
      });
  });
  break;

case "help":
  if (args.length >= 1) {
    if (args[0] == "bitcoinjs" || args[0] == "help") {
      sh("man", [path.resolve(__dirname, '../man/bitcoinjs.1')]);
    } else if (~["run", "db-reset", "db-drop", "test"].indexOf(args[0])) {
      sh("man", [path.resolve(__dirname, '../man/'+args[0]+'.1')]);
    } else {
      logger.error("No help section found for '"+args[0]+"'");
      process.exit(1);
    }
  } else {
    util.puts(usage);
  }
  break;

default:
  logger.error("Unknown command: '"+command+"'");
  util.puts(usage);
}

function isExecutable(path) {
  try {
    var stat = fs.lstatSync(path);
    // TODO: Actually check the file permissions for +x
    return true;
  } catch (err) {}
  return false;
};

function sh(command, args, opts, callback) {
  if ("function" === typeof args) {
    callback = args;
    args = [];
    opts = {};
  }
  if ("function" === typeof opts) {
    callback = opts;
    opts = {};
  }
  if ("object" !== typeof opts) {
    opts = {};
  }
  if (!Array.isArray(args)) {
    args = [];
  }

  opts.customFds = [0, 1, 2];

  var proc = require('child_process').spawn(command, args, opts);
  if ("function" === typeof callback) {
    proc.on('exit', callback);
  }
};
