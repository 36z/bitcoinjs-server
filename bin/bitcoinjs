#!/usr/bin/env node

var fs = require('fs');
var sys = require('sys');
var path = require('path');
var logger = require('../lib/logger');

var args = process.argv.slice(2);
var command = args.shift();

if (!command) {
  command = "help";
}

var usage = "usage: bitcoinjs <command> [<args>] ...\n" +
  "\n" +
  "The most commonly used commands are:\n" +
  "  run      Run node-bitcoin-p2p daemon in foreground\n" +
  "  test     Execute node-bitcoin-p2p's unit tests\n" +
  "\n" +
  "Report bugs via https://github.com/bitcoinjs/node-bitcoin-p2p/issues\n";

switch (command) {
case "run":
  // This modifies the argv array such that we simulate calling the start
  // script direct, i.e. all parameters are passed through.
  process.argv.splice(1, 2, path.resolve(__dirname, '../daemon/start.js'));
  require("../daemon/start");
  break;

case "db-reset":
case "db-drop":
  // This modifies the argv array such that we simulate calling the start
  // script direct, i.e. all parameters are passed through.
  process.argv.splice(1, 2, path.resolve(__dirname, '../daemon/'+command+'.js'));
  require("../daemon/"+command);
  break;

case "test":
  var vowsBin = path.resolve(__dirname, "../node_modules/vows/bin/vows");
  var testDir = path.resolve(__dirname, "../test/");
  var testCases = fs.readdirSync(testDir);
  testCases = testCases.map(function (p) { return "test/" + p });
  args.unshift('--spec');
  sh("vows", testCases.concat(args));
  break;

case "make-man":
  // Regenerate man pages - this is intentionally undocumented (for now)
  // since it's only used by developers with commit rights.
  var Ronn = require('ronn').Ronn;
  var docsPath = path.resolve(__dirname, '../doc/');
  var roffPath = path.resolve(__dirname, '../man/');
  path.exists(roffPath, function (exists) {
    if (!exists) {
      fs.mkdirSync(roffPath, 0777);
    }
    fs.readdirSync(docsPath)
      .forEach(function (file) {
        var ronn = new Ronn(fs.readFileSync(docsPath + '/' + file));
        var roff = ronn.roff();
        fs.writeFileSync(roffPath + '/' + file.replace(/\.md$/, '.1'),
                         roff);
      });
  });
  break;

case "help":
  if (args.length >= 1) {
    if (args[0] == "bitcoinjs" || args[0] == "help") {
      sh("man", [path.resolve(__dirname, '../man/bitcoinjs.1')]);
    } else if (~["run", "db-reset", "db-drop", "test"].indexOf(args[0])) {
      sh("man", [path.resolve(__dirname, '../man/'+args[0]+'.1')]);
    } else {
      logger.error("No help section found for '"+args[0]+"'");
      process.exit(1);
    }
  } else {
    sys.puts(usage);
  }
  break;

default:
  logger.error("Unknown command: '"+command+"'");
  sys.puts(usage);
}


function sh(command, args) {
  var stdio = process.binding("stdio");
  var fds = [ stdio.stdinFD || 0
            , stdio.stdoutFD || 1
            , stdio.stderrFD || 2 ];
  var opts = { customFds : fds };
  require('child_process').spawn(command, args, opts);
};
